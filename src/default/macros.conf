[alert_manager_index]
definition = (index="main" OR index="alerts")

[all_alerts]
definition = tstats values(all_alerts.alert) as alert, values(all_alerts.title) as title, values(all_alerts.app) as app, values(all_alerts.event_search) as event_search, values(all_alerts.search) as search, values(all_alerts.impact) as impact, values(all_alerts.earliest) as earliest, values(all_alerts.latest) as latest, latest(_time) as alert_time, count \
from datamodel="alert_manager" \
where nodename="all_alerts" by all_alerts.job_id, all_alerts.incident_id, all_alerts.result_id, _time span=1s \
| rename all_alerts.incident_id as incident_id, all_alerts.job_id as job_id, all_alerts.result_id as result_id \
| sort 0 - _time \
| dedup incident_id \
| lookup incidents incident_id OUTPUTNEW alert, title, owner, status, impact, urgency, external_reference_id, duplicate_count, alert_time as earliest_alert_time, group_id, category, subcategory, tags, display_fields \
| lookup incident_groups _key AS group_id OUTPUT group \
| eval title=if(isnull(title) OR title="",alert,title) \
| lookup alert_priority impact, urgency OUTPUT priority \
| lookup incident_settings alert OUTPUTNEW category AS category_settings, subcategory as subcategory_setttings, tags as tags_settings, display_fields as display_fields_settings \
| eval category=if(category="",category_settings,category),subcategory=if(subcategory="",subcategory_settings,subcategory),tags=if(tags="",tags_settings,tags),display_fields=if(display_fields="",display_fields_settings,display_fields) \
| lookup alert_status status OUTPUT status_description \
| fillnull value="" tags, category, subcategory \
| eval tags=if(tags=="","[Untagged]",tags) \
| makemv delim=" " tags \
| eval first_seen=strftime(earliest_alert_time, "%Y-%m-%d %H:%M:%S")
iseval = 0

[all_alerts(1)]
definition = tstats values(all_alerts.alert) as alert, values(all_alerts.title) as title, values(all_alerts.app) as app, values(all_alerts.event_search) as event_search, values(all_alerts.search) as search, values(all_alerts.impact) as impact, values(all_alerts.earliest) as earliest, values(all_alerts.latest) as latest, latest(_time) as alert_time, count \
from datamodel="alert_manager" \
where nodename="all_alerts" \
    AND ( [ | inputlookup incident_results \
      | search [| makeresults 1 \
      | eval filter="$filter$" \
      | rex mode=sed field=filter "s/(\S+)([=<>!]+)/fields.\1\2/g" \
      | return $filter ] \
    | fields incident_id \
    | rename incident_id AS all_alerts.incident_id \
    | return 10000 all_alerts.incident_id \
    | eval search=if(isnull(search) OR search="" ,"NOT nodename=\"all_alerts\"",search) ] \
    OR [ | inputlookup incidents \
    | search $filter$ \
    | fields incident_id \
    | rename incident_id AS all_alerts.incident_id \
    | return 10000 all_alerts.incident_id \
    | eval search=if(isnull(search) OR search="" ,"NOT nodename=\"all_alerts\"",search) ] ) \
by all_alerts.job_id, all_alerts.incident_id, all_alerts.result_id, _time \
span=1s \
| rename all_alerts.incident_id as incident_id, all_alerts.job_id as job_id, all_alerts.result_id as result_id \
| sort 0 - _time \
| dedup incident_id \
| lookup incidents incident_id OUTPUTNEW alert, title, owner, status, impact, urgency, external_reference_id, duplicate_count, alert_time as earliest_alert_time, group_id, category, subcategory, tags, display_fields \
| lookup incident_groups _key AS group_id OUTPUT group \
| eval title=if(isnull(title) OR title="",alert,title) \
| lookup alert_priority impact, urgency OUTPUT priority \
| lookup incident_settings alert OUTPUTNEW category AS category_settings, subcategory as subcategory_setttings, tags as tags_settings, display_fields as display_fields_settings \
| eval category=if(category="",category_settings,category),subcategory=if(subcategory="",subcategory_settings,subcategory),tags=if(tags="",tags_settings,tags),display_fields=if(display_fields="",display_fields_settings,display_fields) \
| lookup alert_status status OUTPUT status_description \
| fillnull value="" tags, category, subcategory \
| eval tags=if(tags=="","[Untagged]",tags) \
| makemv delim=" " tags \
| eval first_seen=strftime(earliest_alert_time, "%Y-%m-%d %H:%M:%S")
args = filter
iseval = 0

[all_alerts_single_trend(2)]
args = earliest, latest
#definition = tstats values(all_alerts.alert) as alert values(all_alerts.label) as alert values(all_alerts.severity) as severity count from datamodel="alert_manager" where nodename="all_alerts" earliest="$earliest$" latest="$latest$" by all_alerts.incident_id |rename all_alerts.incident_id as incident_id | lookup incidents incident_id OUTPUT priority | fillnull value=unknown priority |
definition = tstats count from datamodel="alert_manager" where nodename="all_alerts" earliest="$earliest$" latest="$latest$" by all_alerts.incident_id | rename all_alerts.incident_id AS incident_id | lookup incidents incident_id OUTPUT impact, urgency | lookup alert_priority impact, urgency OUTPUT priority | fields priority
iseval = 0

[all_alerts_single_trend]
definition = tstats count from datamodel="alert_manager" where nodename="all_alerts" by all_alerts.incident_id, _time |  rename all_alerts.incident_id AS incident_id | lookup incidents incident_id OUTPUT impact, urgency | lookup alert_priority impact, urgency OUTPUT priority | table _time, count, priority
iseval = 0

[all_alerts_pivot]
definition = pivot alert_manager all_alerts SPLITROW _time PERIOD auto SPLITROW label AS alert SPLITROW app SPLITROW incident_id  SPLITROW event_search SPLITROW search  SPLITROW severity SPLITROW earliest SPLITROW latest ROWSUMMARY 0 COLSUMMARY 0 NUMCOLS 0 SHOWOTHER 1 | sort - _time | lookup incidents incident_id OUTPUT |lookup incident_settings alert OUTPUT category, subcategory, priority |lookup alert_urgencies severity, priority OUTPUT urgency
iseval = 0

[incident_changes]
definition = tstats prestats=true first(all_incident_changes.action) as all_incident_changes.action first(all_incident_changes.incident_id) as all_incident_changes.incident_id first(all_incident_changes.status) as all_incident_changes.status first(all_incident_changes.status_description) as all_incident_changes.status_description first(all_incident_changes.user) as all_incident_changes.user first(all_incident_changes.owner) as all_incident_changes.owner first(all_incident_changes.previous_owner) as all_incident_changes.previous_owner first(all_incident_changes.group) as all_incident_changes.group first(all_incident_changes.previous_group) as all_incident_changes.previous_group first(all_incident_changes.urgency) as all_incident_changes.urgency first(all_incident_changes.previous_urgency) as all_incident_changes.previous_urgency \
from datamodel=alert_manager.all_incident_changes \
where (nodename = all_incident_changes ) \
by _time, all_incident_changes.event_id \
| rename "all_incident_changes.*" as * \
| sort 0 -_time

[incident_changes(1)]
definition = tstats prestats=true first(all_incident_changes.action) as all_incident_changes.action first(all_incident_changes.incident_id) as all_incident_changes.incident_id first(all_incident_changes.status) as all_incident_changes.status first(all_incident_changes.status_description) as all_incident_changes.status_description first(all_incident_changes.user) as all_incident_changes.user first(all_incident_changes.owner) as all_incident_changes.owner first(all_incident_changes.previous_owner) as all_incident_changes.previous_owner first(all_incident_changes.group) as all_incident_changes.group first(all_incident_changes.previous_group) as all_incident_changes.previous_group first(all_incident_changes.urgency) as all_incident_changes.urgency first(all_incident_changes.previous_urgency) as all_incident_changes.previous_urgency \
from datamodel=alert_manager.all_incident_changes \
where (nodename = all_incident_changes ) AND all_incident_changes.incident_id=$incident_id$ \
by _time, all_incident_changes.event_id \
| rename "all_incident_changes.*" as * \
| sort 0 -_time
args = incident_id 

[incident_history(1)]
args = incident_id
definition = `incident_changes($incident_id$)` | sort - _time | eval previous_value=coalesce(previous_status, previous_owner, previous_urgency, previous_group) | eval attribute=case(isnotnull(owner),"owner",isnotnull(urgency),"urgency",isnotnull(status),"status",isnotnull(group),"group") | eval attribute_val=case(isnotnull(owner),owner,isnotnull(urgency),urgency,isnotnull(status),status,isnotnull(group),group) | eval suppression_rules=if(isnotnull(suppression_rule),mvjoin(suppression_rule,", "),"") | eval details=case(action="auto_previous_resolve","Incident resolved by system (because of a new incident)",action="auto_ttl_resolve","Incident resolved by system (TTL reached)",action="create","Incident created",action="change",attribute + " has been changed from '" + previous_value + "' to '" + attribute_val+"'", action="suppress", "Incident suppressed by rules: " + suppression_rule, action="auto_suppress_resolve", "Incident auto-suppressed by rules: " + suppression_rule, action="comment", "Comment added", action="new_subsequent_incident", "New identical incident with incident_id='"+ new_incident_id +"' has been created and automatically resolved.", action="auto_subsequent_resolve", "Incident resolved by system (because of a identical pre-existing incident)") | lookup alert_status status OUTPUT status_description | table _time, action, user, owner, status_description, details, comment

[incident_details(2)]
args = incident_id, fields
definition = loadincidentresults $incident_id$ | fields $fields$ | table $fields$ | transpose | rename column AS Key, "row 1" AS Value, "row 2" AS "Value 2", "row 3" AS "Value 3", "row 4" AS "Value 4", "row 5" AS "Value 5",
iseval = 0

[incident_details(1)]
args = incident_id
definition = loadincidentresults $incident_id$ | transpose | rename column AS Key, "row 1" AS Value, "row 2" AS "Value 2", "row 3" AS "Value 3", "row 4" AS "Value 4", "row 5" AS "Value 5"
iseval = 0

[alert_users]
definition = rest /services/admin/alert_manager/settings | fields default_owner | rename default_owner AS name | append [ makeresults | eval name="unassigned" ] | fields - _time | append [ inputlookup alert_users | sort name | fields name ] | dedup name
